options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	< PRINT: "print" > |
	< INPUT: "input" > |
    < TRUE: "true">    |
    < FALSE: "false">  |
    < RETURN: "return">
	// À compléter au besoin
}

// Operators
TOKEN :
{
	< ASSIGN: < EQUAL >  > |
	< COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
    < LOGIC: < AND > | < OR > > |
	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |

	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |
    < NOT: "!" > |

	< #EQUAL: "=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," > |
	< #AND: "&&" > |
	< #OR: "||" > |

	<IF: "if"> |
	<ELSE: "else"> |
	<FOR: "for"> |
	<SWITCH: "switch" > |
	<CASE: "case" > |
	<SWITCHDEFAULT : "default" > |
	< DO: "do"> |
	< WHILE: "while"> |

	< ARROW: "->">
}

// Types
TOKEN:
{
    < TYPES: < INT > | < FLOAT > | < BOOL > >|
    < #INT: "int" > |
    < #FLOAT: "float" > |
    < #BOOL: "bool" >
}

// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	//TODO: Caution! Allows numbers such as "0000.23"... to fix!!!
	< REAL: ("-")? (<INTEGER>)? "." (["0"-"9"])* (<EXPONENT>)? |
    			  (<INTEGER>)+ <EXPONENT> > |
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}

//
// SYNTAX ANALYSIS
//



// à compléter
void Stmt()#void : { }
{
	AssignStmt() <SEMICOLON> | IfStmt() | ForStmt() | DoWhileStmt() | WhileStmt() | SwitchStmt()
}

ASTProgram Program() : { }
{
	Block() <EOF> { return jjtThis;  }
}

void Block()#void : { }
{
	 (Stmt())+
}

// à finir -- commencez ici!
void AssignStmt() : { }
{
    Identifier() <ASSIGN> (LOOKAHEAD(2)Expr() | LOOKAHEAD(2)AnonFunction())
}

void AnonFunction(): { }
{
    <LPAREN>
    (<TYPES> Identifier()(<COMMA> <TYPES> Identifier())*)?
    <RPAREN> <ARROW>
    (<LACC> (Block())? <RETURN> Expr() <SEMICOLON> <RACC> | Stmt() )
}

void Expr()#void : {}
{
    IntExpr()
}

void IntExpr()#void : { }
{
    IntLogicExpr()
}

// Priorité des opérations -----------------------
void IntLogicExpr()#void : { }
{
    (ComparExpr() (LOOKAHEAD(2) <LOGIC> ComparExpr())*) #AndOrExpr(>1)
}

void ComparExpr()#void : { }
{
    (AddExpr() (LOOKAHEAD(2) <COMPARE> AddExpr())*) #Comparison(>1)
}

void AddExpr()#void : { } {
   (MulExpr() (LOOKAHEAD(2) (<PLUS> | <MINUS> ) MulExpr())*) #Addition(>1)
}

void MulExpr()#void : { } {
    (NegExpr() (LOOKAHEAD(2) (<FOIS> | <DIV> ) NegExpr() )*) #Multiplication(>1)
}

void NegExpr()#void : { } {
      ((<MINUS>)+ NotExpr())#Negative(>0) | NotExpr()
}

void NotExpr()#void : { } {
    ((<NOT>)+ IntBasicExpr())#Not(>0) | IntBasicExpr()
}

void IntBasicExpr()#void : { }
{
	LOOKAHEAD(2) Identifier() |
	IntValue() |
	RealValue() |
	LOOKAHEAD(2) <LPAREN> Expr() <RPAREN> |
	BoolValue()
}

void Identifier() : { }
{
	<IDENTIFIER>
}

void IntValue() : { }
{
	<INTEGER>
}

void RealValue() : { }
{
    <REAL>
}

void BoolValue() : { }
{
    <TRUE> | <FALSE>
}

void IfStmt() : { }
{
    <IF> <LPAREN> Expr() <RPAREN>
    (Stmt() | <LACC> Block() <RACC>)
    (
        LOOKAHEAD(2) <ELSE> (LOOKAHEAD(2) <IF> <LPAREN> Expr() <RPAREN> )?
        (<LACC> Block() <RACC> | Stmt())
    )*
}

void ForStmt() : { }
{
    <FOR> <LPAREN> (AssignStmt())? <SEMICOLON> (Expr())? <SEMICOLON> (AssignStmt())? <RPAREN> (<LACC> Block() <RACC> | Stmt() )
}

void WhileStmt() : { }
{
    <WHILE> <LPAREN> Expr() <RPAREN> (Stmt() | <LACC> Block() <RACC> )
}

void DoWhileStmt() : { }
{
    <DO> <LACC> Block() <RACC> <WHILE> <LPAREN> Expr() <RPAREN> <SEMICOLON>
}

void SwitchStmt() : { }
{
    <SWITCH> <LPAREN> Expr() <RPAREN> <LACC> (<CASE> Expr() <COLON> Stmt())+ (<SWITCHDEFAULT> <COLON> Stmt())? <RACC>
}